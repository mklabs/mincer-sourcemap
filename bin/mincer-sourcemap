#!/usr/bin/env node

// XXX noptify
var fs     = require('fs');
var path   = require('path');
var noptify = require('noptify')
var minmap = require('..');

var opts = noptify(process.argv, { program: 'mincer-sourcemap' })
  .version(require('../package.json').version)
  .option('output', 'The output stream (default: process.stdout)')

  // The source-map option, if not defined, mincer-sourcemap will try to
  // determine one from input or defaults to `mincer.map` for stdin
  .option('source-map', 'The generated sourcemap location')

  // The source map root option. Not required, allows you to prepend the
  // sources with a folder structure â€“ this is also how you hook scripts
  // within a CDN
  .option('source-map-root', 'Sourcemap root option')

  // When defined, goes through each sourcemap filepath, and
  // remove the value you define here, should be relative to
  // `source-map-root`
  .option('source-map-prefix', 'Rewrites sources Array in genrated sourcemap to remove this prefix value')

  // The in sourcemap option, in case you are generating sourcemap from
  // other sourcemapped input
  .option('in-source-map', 'Explicitely specificy the input sourcemap, otherwise guess from input', String)

  // Allows you to prevent the minification process, only generates the sourcemap file.
  .option('nocompress', 'Outputs JS in beautified mode instead of the standard minification', Boolean)

  .shorthands({
    sourcemap        : '--source-map',
    prefix           : '--source-map-prefix',
    root             : '--source-map-root',
    'sourcemap-root' : '--source-map-root',
    nominify         : '--nocompress',
    'no-minify'      : '--nocompress',
    'no-compress'    : '--nocompress',
    'dev'            : '--nocompress'
  })

  .on('help', function() {
    console.log();
    console.log('  Examples:');
    console.log();
    console.log('    # js');
    console.log('    $ mincer assets/javascript/manifest.js | mincer-sourcemap');
    console.log('    $ mincer-sourcemap assets/javascript/app.bundle.js');
    console.log();
  })

  .parse();

var files = opts.argv.remain;
var output = opts.output ? fs.createWriteStream(opts.output) : process.stdout;

var input = '';

// have positional arguments, consider as the array of input files
// otherwise, if no args, take input from stdin
var collect = files.length ? readFiles.bind(null, files.slice(0)) : stdin;

collect(function(err, result) {
  if(err) throw err;
  if(!opts['source-map']) {
    if(files.length === 1) {
      opts['source-map'] = files[0] + '.map';
      console.error('... No sourcemap option defined, but only a single entry file. Defaults sourcemap to %s ...', opts['source-map']);
    }
  }

  minmap(result, opts).pipe(output);
});

// Utilities

function stdin(done) {
  var data = '';
  process.stdin.setEncoding('utf8');
  process.stdin.on('error', done);
  process.stdin.on('data', function(chunk){
    data += chunk;
  }).on('end', function(){
    done(null, data);
  }).resume();
}

function readFiles(files, done) {
  var data = '';
  (function read(file) {
    if(!file) return done(null, data);
    fs.readFile(file, 'utf8', function(err, body) {
      if(err) return done(err);
      data += body;
      read(files.shift());
    });
  })(files.shift());
}
