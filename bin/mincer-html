#!/usr/bin/env node

var noptify = require('noptify')
var minmap  = require('..');

var program = noptify(process.argv);

program.option('convert', '-c', 'Convert the HTML into a valid JS or CSS bundle', Boolean);
program.option('grep', '-g', 'Only output assets matching the provided pattern', String);
program.option('css', 'Only output stylesheets', Boolean);
program.option('js', 'Only output javascript', Boolean);

var opts = program.parse();
program.collect(run);

// XXX:
//
//    program.pipe(new MincerHtml).pipe(process.stdout);
//

function run(err, result) {
  var html = new MincerHtml(result, opts);
  html.pipe(process.stdout)
}

// XXX lib/mincer-html.js

var util = require('util');
var Stream = require('stream').Stream;

// Parses a chunk of HTML and returns the lisf of JS and CSS assets in the
// order they appear in the input chunk of HTML.
function MincerHtml(html, options) {
  options = this.options = options || {};
  this.body = html;
  this.tree = {};
  this.assets = [];

  this.matchCss = options.matchCss || /\s*<link.+href=['"](.+)['"]/;
  this.matchJs = options.matchJs || /\s*<script.+src=['"](.+)['"]/;

  this.parse();
  process.nextTick(this.output.bind(this));
}

util.inherits(MincerHtml, Stream);

MincerHtml.prototype.parse = function parse(data) {
  data = data ||Â this.body;
  var lines = data.split('\n');

  var assets = lines.filter(function(l) {
    var js = this.matchJs.test(l);
    var css = this.matchCss.test(l);
    return js || css;
  }, this).map(function(line) {
    var filepath = (line.match(this.matchCss) || [])[1];
    if(!filepath) filepath = (line.match(this.matchJs) || [])[1];
    return filepath || '';
  }, this);

  this.assets = this.assets.concat(assets);

  return this;
};

MincerHtml.prototype.output = function output() {
  var assets = this.assets;

  if(this.options.css) assets = this.filter(assets, '.css');
  if(this.options.js) assets = this.filter(assets, '.js');
  if(this.options.grep) assets = this.filter(assets, new RegExp(this.options.grep));

  if(this.options.convert) return this.convert(assets);

  assets.forEach(function(filename) {
    this.emit('data', filename + '\n');
  }, this);
  return this;
};

MincerHtml.prototype.convert = function convert(assets) {
  assets = assets || this.assets;
  var css = this.filter(assets, '.css');
  var js = this.filter(assets, '.js');

  if(css.length) {
    this.css(css);
    if(js.length) this.write();
  }
  if(js.length) this.js(js);
  return this;
};

MincerHtml.prototype.css = function css(styles) {
  if(typeof styles === 'string') styles = styles.split(' ');
  styles = Array.isArray(styles) ? styles : [styles];
  this.write('/** Generated CSS bundle ' + new Date() + '**/');
  this.write();
  this.write('/*');
  this.write();
  styles.forEach(function(file) {
    this.write('= require ' + file);
  }, this);
  this.write().write('*/');
  return this;
};

MincerHtml.prototype.js = function css(scripts) {
  if(typeof scripts === 'string') scripts = scripts.split(' ');
  scripts = Array.isArray(scripts) ? scripts : [scripts];
  this.write('// Generated JS bundle ' + new Date());
  this.write();
  scripts.forEach(function(file) {
    this.write('//= require ' + file);
  }, this);
  return this;
};

MincerHtml.prototype.filter = function filter(list, extension) {
  var reg = extension instanceof RegExp ? extension : new RegExp(extension + '$');
  return list.filter(function(item) {
    return reg.test(item);
  });
};

MincerHtml.prototype.write = function write(chunk, endline) {
  endline = endline === false ? '' : (endline || '\n');
  var data = (chunk || '') + '';
  if(data === '[object Object]') data = JSON.stringify(chunk, null, 2);
  this.emit('data', data + endline);
  return this;
};

// XXX use debug package
MincerHtml.prototype.debug = function debug() {
  if(this.options.debug) {
    console.error.apply(console, arguments);
  }
  return this;
};

MincerHtml.prototype.log = function log() {
  console.error.apply(console, arguments);
  return this;
};

MincerHtml.prototype.inspect = function inspect(name, obj) {
  if(!obj) obj = name, name = '';
  console.error.apply(name, util.inspect(obj, false, 2, true));
  return this;
};
